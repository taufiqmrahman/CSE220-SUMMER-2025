//Assignment 4

//task1
private int hashFunction( Integer key ){
        int size = ht.length;
        int idx = (key+3)%size;
        return idx; 
    }

    public void remove( Integer key ){
        int idx = hashFunction(key);
        
        if((Integer)ht[idx].key==key){
            PairNode temp = ht[idx];
            ht[idx] = ht[idx].next;
            temp.next = null;
        }
        else{
            PairNode temp = ht[idx];
            while(temp.next!=null){
                if(temp.next.key == key){
                    temp.next = temp.next.next;
                    break;
                }
                temp = temp.next;
            }
        }
    }


//task2
 public static int diamondCount(Stack stack, String str) {
        
        int count1 =0;
        for(int i=0; i<str.length();i++){
            char ch = str.charAt(i);
            if(ch=='<'){
                stack.push(ch);
            }
            else if(ch=='>'){
                if(stack.isEmpty()==false && (char)stack.peek() == '<'){
                    stack.pop();
                    count1++;
                }
            }
        }
        return count1;
        
    }

//task3
public static String removeConsecDups(String word){
        LinkedListQueue ans = new LinkedListQueue();
        for(int i=0; i<word.length();i++){
            char ch = word.charAt(i);
            if(ans.isEmpty()==true){
                ans.enqueue(ch);
            }
            else{
                char ch2 = word.charAt(i-1);
                if(ch!=ch2 && ans.isEmpty()==false){
                    ans.enqueue(ch);
                }
            }
        }
        String ans2 ="";
        while(ans.isEmpty()==false){
            ans2 += ans.dequeue();
        }
        return ans2;
    }